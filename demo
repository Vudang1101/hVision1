<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ƒê·ªÅ Xu·∫•t Website M√¥i Gi·ªõi & Cho Thu√™ Khu C√¥ng Nghi·ªáp - T∆∞∆°ng T√°c N√¢ng Cao</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Visualization & Content Choices:
        - Project Idea & Objectives: Text, stats, icons (No change).
        - Core Services: Interactive cards (No change).
        - Key Features:
            - Listings: Mockup enhanced with "‚ú® Generate Description" button calling Gemini API. Input fields for property details, textarea for LLM output.
            - GIS, OCR, 360¬∞ View: Mockups remain (No change).
            - AI Chatbot: Replaced mockup with a functional chat interface (input, history, send button) powered by Gemini API for Q&A.
        - Target Audience: Icons, text, Pie Chart (No change).
        - Technology & Design: Bullet points, tech icons (No change).
        - Future Development: Timeline graphic (No change).
        - Justification: Gemini integrations provide dynamic content generation, making the "Features" section more interactive and demonstrative of AI capabilities.
        - NO SVG graphics used. NO Mermaid JS used. All charts via Chart.js (Canvas).
        -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #FAF8F5; 
            color: #1A202C; 
        }
        .nav-link {
            @apply px-4 py-2 text-sm font-medium text-gray-700 hover:bg-sky-100 hover:text-sky-700 rounded-md transition-colors duration-150;
        }
        .nav-link.active {
            @apply bg-sky-600 text-white hover:bg-sky-700;
        }
        .section-title {
            @apply text-3xl font-bold text-center mb-8 text-sky-700; 
        }
        .card {
            @apply bg-white p-6 rounded-xl shadow-lg transition-all duration-300 hover:shadow-2xl;
        }
        .feature-mockup {
            @apply border-2 border-dashed border-gray-300 p-6 rounded-lg bg-gray-50 text-center;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 500px;
            margin-left: auto;
            margin-right: auto;
            height: 300px; 
            max-height: 350px;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 350px;
            }
        }
        .tab-button {
            @apply px-4 py-2 font-medium text-sm rounded-t-lg transition-colors duration-150;
        }
        .tab-button.active {
            @apply bg-sky-600 text-white;
        }
        .tab-button:not(.active) {
            @apply bg-gray-200 hover:bg-gray-300 text-gray-700;
        }
        .tooltip {
            @apply absolute invisible group-hover:visible bg-black text-white text-xs rounded py-1 px-2 bottom-full left-1/2 transform -translate-x-1/2 mb-2 whitespace-nowrap;
        }
        .loader {
            @apply border-4 border-gray-200 border-t-sky-600 rounded-full w-5 h-5 animate-spin;
        }
        .chat-bubble {
            @apply p-3 rounded-lg max-w-[70%];
        }
        .user-bubble {
            @apply bg-sky-500 text-white ml-auto;
        }
        .ai-bubble {
            @apply bg-gray-200 text-gray-800;
        }
    </style>
</head>
<body class="antialiased">

    <header class="bg-white shadow-md sticky top-0 z-50">
        <nav class="container mx-auto px-6 py-3 flex justify-between items-center">
            <a href="#" class="text-2xl font-bold text-sky-700">ƒê·ªÅ Xu·∫•t KCN T∆∞∆°ng T√°c</a>
            <div class="flex space-x-1 md:space-x-2">
                <a href="#overview" class="nav-link active">T·ªïng Quan</a>
                <a href="#services" class="nav-link">D·ªãch V·ª•</a>
                <a href="#features" class="nav-link">T√≠nh NƒÉng</a>
                <a href="#audience" class="nav-link">ƒê·ªëi T∆∞·ª£ng</a>
                <a href="#tech" class="nav-link">C√¥ng Ngh·ªá</a>
                <a href="#roadmap" class="nav-link">L·ªô Tr√¨nh</a>
            </div>
        </nav>
    </header>

    <main class="container mx-auto px-6 py-8">

        <section id="overview" class="py-12">
            <h2 class="section-title">üìä T·ªïng Quan D·ª± √Ån Website KCN</h2>
            <div class="grid md:grid-cols-2 gap-8 items-center">
                <div class="card">
                    <h3 class="text-xl font-semibold text-sky-600 mb-3">√ù T∆∞·ªüng C·ªët L√µi</h3>
                    <p class="text-gray-700 leading-relaxed">
                        X√¢y d·ª±ng m·ªôt n·ªÅn t·∫£ng tr·ª±c tuy·∫øn chuy√™n bi·ªát v√† to√†n di·ªán cho lƒ©nh v·ª±c b·∫•t ƒë·ªông s·∫£n khu c√¥ng nghi·ªáp (KCN). Website s·∫Ω l√† c·∫ßu n·ªëi hi·ªáu qu·∫£ gi·ªØa nh√† ƒë·∫ßu t∆∞, doanh nghi·ªáp c√≥ nhu c·∫ßu thu√™/mua nh√† x∆∞·ªüng, ƒë·∫•t c√¥ng nghi·ªáp v·ªõi c√°c ch·ªß ƒë·∫ßu t∆∞ KCN. N·ªÅn t·∫£ng t√≠ch h·ª£p c√¥ng ngh·ªá ti√™n ti·∫øn v√† d·ªãch v·ª• t∆∞ v·∫•n chuy√™n s√¢u, mang l·∫°i gi√° tr·ªã t·ªëi ƒëa cho ng∆∞·ªùi d√πng.
                    </p>
                </div>
                <div class="card">
                    <h3 class="text-xl font-semibold text-sky-600 mb-3">M·ª•c Ti√™u Ch√≠nh</h3>
                    <ul class="list-disc list-inside text-gray-700 space-y-2">
                        <li>Tr·ªü th√†nh n·ªÅn t·∫£ng th√¥ng tin BƒêS KCN h√†ng ƒë·∫ßu, k·∫øt n·ªëi 63 t·ªânh/th√†nh.</li>
                        <li>T·ªëi ∆∞u h√≥a k·∫øt n·ªëi cung - c·∫ßu, t·∫°o th·ªã tr∆∞·ªùng minh b·∫°ch, hi·ªáu qu·∫£.</li>
                        <li>N√¢ng cao tr·∫£i nghi·ªám ng∆∞·ªùi d√πng b·∫±ng c√¥ng ngh·ªá (GIS, OCR, AI, 360¬∞).</li>
                        <li>Th√∫c ƒë·∫©y x√∫c ti·∫øn ƒë·∫ßu t∆∞ v√†o lƒ©nh v·ª±c c√¥ng nghi·ªáp Vi·ªát Nam.</li>
                        <li>Chu·∫©n h√≥a quy tr√¨nh d·ªãch v·ª• t∆∞ v·∫•n chuy√™n nghi·ªáp.</li>
                    </ul>
                </div>
            </div>
             <p class="mt-8 text-center text-gray-600 italic">Ph·∫ßn n√†y gi·ªõi thi·ªáu t·ªïng quan v·ªÅ √Ω t∆∞·ªüng v√† m·ª•c ti√™u ch√≠nh c·ªßa d·ª± √°n website m√¥i gi·ªõi v√† cho thu√™ khu c√¥ng nghi·ªáp, gi√∫p ng∆∞·ªùi d√πng n·∫Øm b·∫Øt ƒë∆∞·ª£c t·∫ßm nh√¨n v√† s·ª© m·ªánh c·ªßa n·ªÅn t·∫£ng.</p>
        </section>

        <section id="services" class="py-12 bg-teal-50 rounded-xl">
            <h2 class="section-title">üõ†Ô∏è D·ªãch V·ª• C·ªët L√µi</h2>
            <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div class="card cursor-pointer service-card" data-service="moi-gioi">
                    <h3 class="text-lg font-semibold text-sky-600 mb-2">T∆∞ v·∫•n & M√¥i gi·ªõi BƒêS KCN</h3>
                    <p class="text-sm text-gray-600">K·∫øt n·ªëi nhu c·∫ßu thu√™ nh√† x∆∞·ªüng, ƒë·∫•t c√¥ng nghi·ªáp v·ªõi ngu·ªìn cung ph√π h·ª£p.</p>
                </div>
                <div class="card cursor-pointer service-card" data-service="phap-ly">
                    <h3 class="text-lg font-semibold text-sky-600 mb-2">T∆∞ v·∫•n Ph√°p L√Ω</h3>
                    <p class="text-sm text-gray-600">Th√¥ng tin, t∆∞ v·∫•n quy ƒë·ªãnh ph√°p lu·∫≠t v·ªÅ ƒë·∫ßu t∆∞, thu√™ ƒë·∫•t, x√¢y d·ª±ng trong KCN.</p>
                </div>
                <div class="card cursor-pointer service-card" data-service="dau-tu">
                    <h3 class="text-lg font-semibold text-sky-600 mb-2">T∆∞ v·∫•n ƒê·∫ßu T∆∞</h3>
                    <p class="text-sm text-gray-600">Ph√¢n t√≠ch th·ªã tr∆∞·ªùng, ƒë√°nh gi√° ti·ªÅm nƒÉng KCN, h·ªó tr·ª£ quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞.</p>
                </div>
                <div class="card cursor-pointer service-card" data-service="thong-tin">
                    <h3 class="text-lg font-semibold text-sky-600 mb-2">Cung c·∫•p Th√¥ng tin Th·ªã tr∆∞·ªùng</h3>
                    <p class="text-sm text-gray-600">C·∫≠p nh·∫≠t xu h∆∞·ªõng, ch√≠nh s√°ch m·ªõi, b√°o c√°o ph√¢n t√≠ch chuy√™n s√¢u.</p>
                </div>
            </div>
            <div id="service-details-container" class="mt-6 p-4 bg-white rounded-lg shadow hidden">
                <h4 id="service-detail-title" class="text-xl font-semibold text-sky-700 mb-2"></h4>
                <p id="service-detail-content" class="text-gray-700"></p>
            </div>
            <p class="mt-8 text-center text-gray-600 italic">Khu v·ª±c n√†y tr√¨nh b√†y c√°c d·ªãch v·ª• ch√≠nh m√† website s·∫Ω cung c·∫•p. Ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫•p v√†o t·ª´ng d·ªãch v·ª• ƒë·ªÉ xem m√¥ t·∫£ chi ti·∫øt h∆°n, hi·ªÉu r√µ h∆°n v·ªÅ ph·∫°m vi h·ªó tr·ª£ c·ªßa n·ªÅn t·∫£ng.</p>
        </section>

        <section id="features" class="py-12">
            <h2 class="section-title">‚ú® T√≠nh NƒÉng N·ªïi B·∫≠t</h2>
            <div class="mb-6 flex justify-center space-x-1 sm:space-x-2 flex-wrap">
                <button class="tab-button active" data-tab="search">T√¨m Ki·∫øm & ƒêƒÉng Tin BƒêS</button>
                <button class="tab-button" data-tab="ai">AI Chatbot Ph√°p L√Ω</button>
                <button class="tab-button" data-tab="gis">C√¥ng C·ª• GIS</button>
                <button class="tab-button" data-tab="ocr">C√¥ng C·ª• OCR</button>
                <button class="tab-button" data-tab="360">Xem 360¬∞</button>
            </div>

            <div id="feature-content-area">
                <div id="tab-search" class="tab-content card">
                    <h3 class="text-xl font-semibold text-sky-600 mb-4">üîé T√¨m Ki·∫øm & ƒêƒÉng Tin B·∫•t ƒê·ªông S·∫£n KCN</h3>
                    <p class="text-gray-700 mb-4">Giao di·ªán t√¨m ki·∫øm tr·ª±c quan v√† t√≠nh nƒÉng ƒëƒÉng tin BƒêS th√¥ng minh, h·ªó tr·ª£ b·ªüi AI ƒë·ªÉ t·∫°o m√¥ t·∫£ h·∫•p d·∫´n.</p>
                    
                    <div class="grid md:grid-cols-2 gap-6">
                        <div class="feature-mockup">
                            <p class="font-medium mb-2">Giao di·ªán t√¨m ki·∫øm (Mockup)</p>
                            <select class="w-full p-2 border border-gray-300 rounded mb-2 bg-white">
                                <option>Ch·ªçn T·ªânh/Th√†nh</option>
                                <option>B·∫Øc Ninh</option>
                                <option>ƒê·ªìng Nai</option>
                            </select>
                            <select class="w-full p-2 border border-gray-300 rounded mb-2 bg-white">
                                <option>Lo·∫°i H√¨nh (Nh√† x∆∞·ªüng, ƒê·∫•t)</option>
                            </select>
                            <input type="text" placeholder="Di·ªán t√≠ch t·ª´ (m¬≤)" class="w-full p-2 border border-gray-300 rounded mb-2">
                            <button class="bg-orange-500 hover:bg-orange-600 text-white font-semibold py-2 px-4 rounded w-full transition-colors">T√¨m Ki·∫øm</button>
                        </div>

                        <div class="feature-mockup">
                            <p class="font-medium mb-2">ƒêƒÉng tin BƒêS & ‚ú® G·ª£i √Ω M√¥ t·∫£ b·∫±ng AI</p>
                            <input type="text" id="prop-type" placeholder="Lo·∫°i h√¨nh BƒêS (VD: Nh√† x∆∞·ªüng)" class="w-full p-2 border border-gray-300 rounded mb-2">
                            <input type="number" id="prop-area" placeholder="Di·ªán t√≠ch (m¬≤)" class="w-full p-2 border border-gray-300 rounded mb-2">
                            <input type="text" id="prop-location" placeholder="V·ªã tr√≠/ƒêi·ªÉm n·ªïi b·∫≠t KCN" class="w-full p-2 border border-gray-300 rounded mb-2">
                            <textarea id="prop-features" placeholder="ƒê·∫∑c ƒëi·ªÉm ch√≠nh kh√°c (VD: c√≥ vƒÉn ph√≤ng, PCCC)" class="w-full p-2 border border-gray-300 rounded mb-2" rows="2"></textarea>
                            <button id="generate-desc-btn" class="bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2 px-4 rounded w-full mb-2 transition-colors flex items-center justify-center">
                                <span class="mr-2">‚ú® G·ª£i √Ω M√¥ t·∫£ BƒêS</span> 
                                <span id="desc-loader" class="loader hidden"></span>
                            </button>
                            <textarea id="generated-prop-desc" placeholder="M√¥ t·∫£ ƒë∆∞·ª£c AI g·ª£i √Ω s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y..." class="w-full p-2 border border-gray-300 rounded mb-2 bg-white" rows="4" readonly></textarea>
                             <div id="desc-error" class="text-red-500 text-sm mt-1 hidden"></div>
                        </div>
                    </div>
                     <p class="mt-6 text-sm text-gray-600 italic">T√≠nh nƒÉng n√†y cho ph√©p ng∆∞·ªùi d√πng d·ªÖ d√†ng t√¨m ki·∫øm b·∫•t ƒë·ªông s·∫£n c√¥ng nghi·ªáp v√† ƒëƒÉng tin hi·ªáu qu·∫£ v·ªõi s·ª± h·ªó tr·ª£ c·ªßa AI trong vi·ªác t·∫°o m√¥ t·∫£ s·∫£n ph·∫©m.</p>
                </div>
                
                <div id="tab-ai" class="tab-content card hidden">
                    <h3 class="text-xl font-semibold text-sky-600 mb-4">ü§ñ AI Chatbot T∆∞ V·∫•n Ph√°p L√Ω C∆° B·∫£n (Gemini API)</h3>
                    <p class="text-gray-700 mb-4">ƒê·∫∑t c√¢u h·ªèi v·ªÅ c√°c v·∫•n ƒë·ªÅ ph√°p l√Ω c∆° b·∫£n li√™n quan ƒë·∫øn khu c√¥ng nghi·ªáp t·∫°i Vi·ªát Nam v√† nh·∫≠n t∆∞ v·∫•n t·ª´ AI.</p>
                    <div class="feature-mockup bg-white p-4 border-gray-300 rounded-md">
                        <div id="chat-history" class="h-64 overflow-y-auto mb-4 space-y-3 p-2 border rounded-md">
                            <div class="chat-bubble ai-bubble">Ch√†o b·∫°n! T√¥i l√† AI t∆∞ v·∫•n ph√°p l√Ω KCN. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?</div>
                        </div>
                        <div class="flex">
                            <input type="text" id="chat-input" placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..." class="flex-grow p-2 border border-gray-300 rounded-l-md">
                            <button id="chat-send-btn" class="bg-sky-600 hover:bg-sky-700 text-white font-semibold py-2 px-4 rounded-r-md flex items-center justify-center">
                                G·ª≠i <span id="chat-loader" class="loader hidden ml-2"></span>
                            </button>
                        </div>
                        <div id="chat-error" class="text-red-500 text-sm mt-1 hidden"></div>
                    </div>
                     <p class="mt-6 text-sm text-gray-600 italic">AI Chatbot, ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi Gemini API, gi√∫p ng∆∞·ªùi d√πng nhanh ch√≥ng nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi cho c√°c th·∫Øc m·∫Øc ph√°p l√Ω c∆° b·∫£n, ti·∫øt ki·ªám th·ªùi gian v√† cung c·∫•p th√¥ng tin h·ªØu √≠ch ban ƒë·∫ßu.</p>
                </div>


                <div id="tab-gis" class="tab-content card hidden">
                    <h3 class="text-xl font-semibold text-sky-600 mb-4">üó∫Ô∏è C√¥ng C·ª• GIS T√≠ch H·ª£p</h3>
                    <p class="text-gray-700 mb-4">Hi·ªÉn th·ªã v·ªã tr√≠ KCN, BƒêS tr√™n b·∫£n ƒë·ªì t∆∞∆°ng t√°c. Cho ph√©p ƒëo ƒë·∫°c, t√≠nh to√°n di·ªán t√≠ch s∆° b·ªô v√† xem th√¥ng tin quy ho·∫°ch li√™n quan.</p>
                    <div class="feature-mockup">
                        <img src="https://placehold.co/600x300/E2E8F0/4A5568?text=B·∫£n+ƒê·ªì+GIS+M√¥+Ph·ªèng" alt="B·∫£n ƒë·ªì GIS m√¥ ph·ªèng" class="w-full rounded-md">
                        <p class="mt-2 text-sm text-gray-500">M√¥ ph·ªèng b·∫£n ƒë·ªì GIS v·ªõi c√°c KCN ƒë∆∞·ª£c ƒë√°nh d·∫•u v√† c√¥ng c·ª• ƒëo l∆∞·ªùng.</p>
                    </div>
                     <p class="mt-6 text-sm text-gray-600 italic">C√¥ng c·ª• GIS cung c·∫•p c√°i nh√¨n tr·ª±c quan v·ªÅ v·ªã tr√≠ ƒë·ªãa l√Ω c·ªßa c√°c khu c√¥ng nghi·ªáp v√† b·∫•t ƒë·ªông s·∫£n, h·ªó tr·ª£ ƒëo ƒë·∫°c v√† ph√¢n t√≠ch th√¥ng tin quy ho·∫°ch, gi√∫p ng∆∞·ªùi d√πng ƒë∆∞a ra quy·∫øt ƒë·ªãnh t·ªët h∆°n.</p>
                </div>

                <div id="tab-ocr" class="tab-content card hidden">
                    <h3 class="text-xl font-semibold text-sky-600 mb-4">üìÑ C√¥ng C·ª• OCR (Nh·∫≠n D·∫°ng K√Ω T·ª± Quang H·ªçc)</h3>
                    <p class="text-gray-700 mb-4">Cho ph√©p ng∆∞·ªùi d√πng t·∫£i l√™n h√¨nh ·∫£nh t√†i li·ªáu (b·∫£n v·∫Ω, gi·∫•y t·ªù) v√† h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông tr√≠ch xu·∫•t n·ªôi dung vƒÉn b·∫£n, h·ªó tr·ª£ nh·∫≠p li·ªáu nhanh ch√≥ng.</p>
                    <div class="grid md:grid-cols-2 gap-4">
                        <div class="feature-mockup">
                            <p class="font-medium mb-2">T·∫£i l√™n t√†i li·ªáu (Mockup)</p>
                            <input type="file" class="w-full p-2 border border-gray-300 rounded mb-2 text-sm bg-white" disabled>
                            <button class="bg-teal-500 hover:bg-teal-600 text-white font-semibold py-2 px-4 rounded w-full transition-colors">Tr√≠ch Xu·∫•t VƒÉn B·∫£n</button>
                        </div>
                        <div class="feature-mockup h-48 overflow-y-auto bg-white p-3 border-gray-300 rounded-md text-left">
                            <p class="font-medium mb-1 text-gray-700">VƒÉn b·∫£n ƒë∆∞·ª£c tr√≠ch xu·∫•t:</p>
                            <p class="text-sm text-gray-600">"ƒêi·ªÅu 1: B√™n A ƒë·ªìng √Ω cho B√™n B thu√™ nh√† x∆∞·ªüng t·∫°i L√¥ C, KCN X..." (ƒê√¢y l√† v√≠ d·ª•)</p>
                        </div>
                    </div>
                    <p class="mt-6 text-sm text-gray-600 italic">T√≠nh nƒÉng OCR gi√∫p s·ªë h√≥a th√¥ng tin t·ª´ t√†i li·ªáu gi·∫•y, thu·∫≠n ti·ªán cho vi·ªác nh·∫≠p li·ªáu v√† l∆∞u tr·ªØ d·ªØ li·ªáu, gi·∫£m thi·ªÉu sai s√≥t v√† ti·∫øt ki·ªám th·ªùi gian cho ng∆∞·ªùi d√πng.</p>
                </div>
                 <div id="tab-360" class="tab-content card hidden">
                    <h3 class="text-xl font-semibold text-sky-600 mb-4">üîÑ Xem H√¨nh ·∫¢nh 360¬∞ Nh√† X∆∞·ªüng</h3>
                    <p class="text-gray-700 mb-4">Tr·∫£i nghi·ªám kh√¥ng gian nh√† x∆∞·ªüng, khu√¥n vi√™n KCN m·ªôt c√°ch ch√¢n th·ª±c v√† to√†n di·ªán th√¥ng qua h√¨nh ·∫£nh 360 ƒë·ªô t∆∞∆°ng t√°c.</p>
                    <div class="feature-mockup">
                        <img src="https://placehold.co/600x350/CBD5E0/2D3748?text=M√¥+Ph·ªèng+Tr√¨nh+Xem+·∫¢nh+360¬∞" alt="M√¥ ph·ªèng xem ·∫£nh 360" class="w-full rounded-md">
                        <p class="mt-2 text-sm text-gray-500">Click v√† k√©o ƒë·ªÉ kh√°m ph√° kh√¥ng gian (m√¥ ph·ªèng).</p>
                    </div>
                    <p class="mt-6 text-sm text-gray-600 italic">H√¨nh ·∫£nh 360¬∞ mang l·∫°i tr·∫£i nghi·ªám th·ª±c t·∫ø ·∫£o, cho ph√©p ng∆∞·ªùi d√πng "tham quan" nh√† x∆∞·ªüng t·ª´ xa, ƒë√°nh gi√° kh√¥ng gian v√† c∆° s·ªü v·∫≠t ch·∫•t m·ªôt c√°ch chi ti·∫øt tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh kh·∫£o s√°t th·ª±c ƒë·ªãa.</p>
                </div>
            </div>
             <p class="mt-8 text-center text-gray-600 italic">C√°c t√≠nh nƒÉng c√¥ng ngh·ªá cao ƒë∆∞·ª£c t√≠ch h·ª£p nh·∫±m mang l·∫°i tr·∫£i nghi·ªám t·ªët nh·∫•t cho ng∆∞·ªùi d√πng, t·ª´ t√¨m ki·∫øm th√¥ng minh, tr·ª±c quan h√≥a d·ªØ li·ªáu kh√¥ng gian, t∆∞ v·∫•n t·ª± ƒë·ªông ƒë·∫øn s·ªë h√≥a t√†i li·ªáu v√† kh√°m ph√° th·ª±c t·∫ø ·∫£o.</p>
        </section>

        <section id="audience" class="py-12 bg-sky-50 rounded-xl">
            <h2 class="section-title">üéØ ƒê·ªëi T∆∞·ª£ng H∆∞·ªõng ƒê·∫øn</h2>
            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6 items-start">
                <div class="card text-center">
                    <span class="text-4xl mb-3 inline-block">üè≠</span>
                    <h3 class="text-lg font-semibold text-sky-600 mb-2">Doanh nghi·ªáp S·∫£n xu·∫•t, Logistics</h3>
                    <p class="text-sm text-gray-600">T√¨m ki·∫øm m·∫∑t b·∫±ng nh√† x∆∞·ªüng, kho b√£i, trung t√¢m ph√¢n ph·ªëi ph√π h·ª£p.</p>
                </div>
                <div class="card text-center">
                    <span class="text-4xl mb-3 inline-block">üèóÔ∏è</span>
                    <h3 class="text-lg font-semibold text-sky-600 mb-2">Ch·ªß ƒë·∫ßu t∆∞ Khu C√¥ng Nghi·ªáp</h3>
                    <p class="text-sm text-gray-600">Qu·∫£ng b√°, gi·ªõi thi·ªáu qu·ªπ ƒë·∫•t, nh√† x∆∞·ªüng cho thu√™ ƒë·∫øn kh√°ch h√†ng ti·ªÅm nƒÉng.</p>
                </div>
                <div class="card text-center">
                    <span class="text-4xl mb-3 inline-block">üí∞</span>
                    <h3 class="text-lg font-semibold text-sky-600 mb-2">Nh√† ƒë·∫ßu t∆∞ BƒêS C√¥ng nghi·ªáp</h3>
                    <p class="text-sm text-gray-600">Quan t√¢m ƒë·∫ßu t∆∞, mua b√°n, chuy·ªÉn nh∆∞·ª£ng BƒêS trong c√°c KCN.</p>
                </div>
                 <div class="md:col-span-2 lg:col-span-3 lg:px-20">
                     <div class="chart-container mt-8">
                        <canvas id="audienceChart"></canvas>
                    </div>
                    <p class="mt-2 text-center text-sm text-gray-600">Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª∑ l·ªá ph√¢n b·ªï (v√≠ d·ª•) c·ªßa c√°c nh√≥m ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u ch√≠nh m√† website h∆∞·ªõng ƒë·∫øn.</p>
                 </div>
            </div>
            <p class="mt-8 text-center text-gray-600 italic">Website ph·ª•c v·ª• ƒëa d·∫°ng c√°c nh√≥m ƒë·ªëi t∆∞·ª£ng c√≥ nhu c·∫ßu v√† l·ª£i √≠ch li√™n quan ƒë·∫øn b·∫•t ƒë·ªông s·∫£n khu c√¥ng nghi·ªáp, t·ª´ doanh nghi·ªáp c·∫ßn thu√™ m·∫∑t b·∫±ng ƒë·∫øn c√°c nh√† ƒë·∫ßu t∆∞ v√† ch·ªß ƒë·∫ßu t∆∞ KCN.</p>
        </section>

        <section id="tech" class="py-12">
            <h2 class="section-title">üíª C√¥ng Ngh·ªá & Thi·∫øt K·∫ø</h2>
            <div class="grid md:grid-cols-2 gap-8">
                <div class="card">
                    <h3 class="text-xl font-semibold text-sky-600 mb-3">üöÄ N·ªÅn T·∫£ng C√¥ng Ngh·ªá</h3>
                    <ul class="list-disc list-inside text-gray-700 space-y-1">
                        <li>Frontend: ReactJS / VueJS (ho·∫∑c t∆∞∆°ng t·ª±)</li>
                        <li>Backend: NodeJS / Python (Django/Flask) / PHP (Laravel)</li>
                        <li>Database: PostgreSQL / MySQL / MongoDB</li>
                        <li>APIs: Google Maps, Mapbox, Cloud Storage, **Gemini API**</li>
                        <li>Modules: GIS, OCR, AI Chatbot (LLM-powered)</li>
                        <li>B·∫£o m·∫≠t: SSL, WAF, C·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n</li>
                    </ul>
                </div>
                <div class="card">
                    <h3 class="text-xl font-semibold text-sky-600 mb-3">üé® Tri·∫øt L√Ω Thi·∫øt K·∫ø</h3>
                     <ul class="list-disc list-inside text-gray-700 space-y-1">
                        <li>Giao di·ªán (UI): Hi·ªán ƒë·∫°i, chuy√™n nghi·ªáp, tr·ª±c quan.</li>
                        <li>Tr·∫£i nghi·ªám (UX): M∆∞·ª£t m√†, d·ªÖ s·ª≠ d·ª•ng, t·ªëi ∆∞u h√†nh tr√¨nh ng∆∞·ªùi d√πng.</li>
                        <li>M√†u s·∫Øc: Xanh d∆∞∆°ng (tin c·∫≠y), x√°m (hi·ªán ƒë·∫°i), k·∫øt h·ª£p m√†u nh·∫•n.</li>
                        <li>Font ch·ªØ: R√µ r√†ng, d·ªÖ ƒë·ªçc, chuy√™n nghi·ªáp.</li>
                        <li>Responsive Design: T∆∞∆°ng th√≠ch m·ªçi thi·∫øt b·ªã.</li>
                    </ul>
                </div>
            </div>
             <p class="mt-8 text-center text-gray-600 italic">N·ªÅn t·∫£ng ƒë∆∞·ª£c x√¢y d·ª±ng tr√™n c√°c c√¥ng ngh·ªá web hi·ªán ƒë·∫°i, bao g·ªìm Gemini API ƒë·ªÉ tƒÉng c∆∞·ªùng t√≠nh nƒÉng th√¥ng minh, ƒë·∫£m b·∫£o hi·ªáu su·∫•t, kh·∫£ nƒÉng m·ªü r·ªông v√† b·∫£o m·∫≠t, c√πng v·ªõi thi·∫øt k·∫ø t·∫≠p trung v√†o tr·∫£i nghi·ªám ng∆∞·ªùi d√πng t·ªëi ∆∞u.</p>
        </section>

        <section id="roadmap" class="py-12 bg-gray-100 rounded-xl">
            <h2 class="section-title">üó∫Ô∏è L·ªô Tr√¨nh Ph√°t Tri·ªÉn</h2>
            <div class="space-y-8 relative before:absolute before:inset-0 before:ml-5 before:h-full before:w-0.5 before:bg-sky-500 before:lg:mx-auto before:lg:translate-x-0">
                <div class="relative flex items-center justify-between lg:justify-normal lg:odd:flex-row-reverse group">
                    <div class="flex items-center justify-center w-10 h-10 rounded-full border border-white bg-sky-600 text-white group-odd:order-1 group-odd:group-lg:ml-[calc(50%-20px)] group-even:group-lg:mr-[calc(50%-20px)] shrink-0">Gƒê1</div>
                    <div class="w-[calc(100%-4rem)] lg:w-[calc(50%-2.5rem)] bg-white p-4 rounded-lg shadow-md ml-4 lg:ml-0 group-odd:ml-0 group-odd:lg:ml-8 group-even:mr-4 group-even:lg:mr-8">
                        <h4 class="font-semibold text-sky-700">Giai ƒëo·∫°n 1: X√¢y d·ª±ng n·ªÅn t·∫£ng MVP</h4>
                        <p class="text-sm text-gray-600">T·∫≠p trung v√†o c√°c t√≠nh nƒÉng c·ªët l√µi: ƒêƒÉng tin, t√¨m ki·∫øm BƒêS, qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng c∆° b·∫£n, trang th√¥ng tin KCN.</p>
                    </div>
                </div>
                <div class="relative flex items-center justify-between lg:justify-normal lg:odd:flex-row-reverse group">
                    <div class="flex items-center justify-center w-10 h-10 rounded-full border border-white bg-sky-600 text-white group-odd:order-1 group-odd:group-lg:ml-[calc(50%-20px)] group-even:group-lg:mr-[calc(50%-20px)] shrink-0">Gƒê2</div>
                     <div class="w-[calc(100%-4rem)] lg:w-[calc(50%-2.5rem)] bg-white p-4 rounded-lg shadow-md ml-4 lg:ml-0 group-odd:ml-0 group-odd:lg:ml-8 group-even:mr-4 group-even:lg:mr-8">
                        <h4 class="font-semibold text-sky-700">Giai ƒëo·∫°n 2: T√≠ch h·ª£p C√¥ng ngh·ªá N√¢ng cao (C√≥ Gemini API)</h4>
                        <p class="text-sm text-gray-600">Ph√°t tri·ªÉn v√† t√≠ch h·ª£p GIS, AI Chatbot (s·ª≠ d·ª•ng Gemini API), OCR, h√¨nh ·∫£nh 360¬∞. T·∫°o t√≠nh nƒÉng g·ª£i √Ω m√¥ t·∫£ BƒêS b·∫±ng Gemini API. M·ªü r·ªông c∆° s·ªü d·ªØ li·ªáu.</p>
                    </div>
                </div>
                <div class="relative flex items-center justify-between lg:justify-normal lg:odd:flex-row-reverse group">
                    <div class="flex items-center justify-center w-10 h-10 rounded-full border border-white bg-sky-600 text-white group-odd:order-1 group-odd:group-lg:ml-[calc(50%-20px)] group-even:group-lg:mr-[calc(50%-20px)] shrink-0">Gƒê3</div>
                     <div class="w-[calc(100%-4rem)] lg:w-[calc(50%-2.5rem)] bg-white p-4 rounded-lg shadow-md ml-4 lg:ml-0 group-odd:ml-0 group-odd:lg:ml-8 group-even:mr-4 group-even:lg:mr-8">
                        <h4 class="font-semibold text-sky-700">Giai ƒëo·∫°n 3: M·ªü r·ªông D·ªãch v·ª• & Ph√°t tri·ªÉn C·ªông ƒë·ªìng</h4>
                        <p class="text-sm text-gray-600">N√¢ng c·∫•p AI Chatbot (t√≠nh nƒÉng h·ªçc h·ªèi, c√° nh√¢n h√≥a), ph√°t tri·ªÉn d·ªãch v·ª• t∆∞ v·∫•n chuy√™n s√¢u, x√¢y d·ª±ng c·ªông ƒë·ªìng ng∆∞·ªùi d√πng, tri·ªÉn khai mobile app.</p>
                    </div>
                </div>
            </div>
            <p class="mt-8 text-center text-gray-600 italic">L·ªô tr√¨nh ph√°t tri·ªÉn ƒë∆∞·ª£c chia th√†nh c√°c giai ƒëo·∫°n r√µ r√†ng, t·∫≠p trung v√†o vi·ªác x√¢y d·ª±ng c√°c t√≠nh nƒÉng c·ªët l√µi tr∆∞·ªõc, sau ƒë√≥ m·ªü r·ªông v√† t√≠ch h·ª£p c√°c c√¥ng ngh·ªá n√¢ng cao c≈©ng nh∆∞ ph√°t tri·ªÉn d·ªãch v·ª• gi√° tr·ªã gia tƒÉng.</p>
        </section>

    </main>

    <footer class="bg-sky-800 text-white py-8 text-center">
        <p>&copy; 2025 ƒê·ªÅ Xu·∫•t Website KCN - hVision.</p>
        <p class="text-sm text-sky-200">Prototype - hVision.</p>
    </footer>

    <script>
        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({
                        behavior: 'smooth'
                    });
                    document.querySelectorAll('.nav-link').forEach(link => link.classList.remove('active'));
                    this.classList.add('active');
                }
            });
        });

        const sections = document.querySelectorAll('section');
        const navLinks = document.querySelectorAll('.nav-link');
        window.addEventListener('scroll', () => {
            let current = 'overview'; // Default to overview
            sections.forEach(section => {
                const sectionTop = section.offsetTop;
                if (pageYOffset >= sectionTop - 70) { // Adjusted for sticky header
                    current = section.getAttribute('id');
                }
            });

            navLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href').substring(1) === current) {
                    link.classList.add('active');
                }
            });
             // Ensure first link is active if at top
            if (pageYOffset < sections[0].offsetTop - 70) {
                 navLinks.forEach(link => link.classList.remove('active'));
                 document.querySelector('a[href="#overview"]').classList.add('active');
            }
        });
        
        const serviceCards = document.querySelectorAll('.service-card');
        const serviceDetailContainer = document.getElementById('service-details-container');
        const serviceDetailTitle = document.getElementById('service-detail-title');
        const serviceDetailContent = document.getElementById('service-detail-content');

        const serviceDetails = {
            "moi-gioi": {
                title: "Chi ti·∫øt: T∆∞ v·∫•n & M√¥i gi·ªõi BƒêS KCN",
                content: "D·ªãch v·ª• n√†y gi√∫p k·∫øt n·ªëi tr·ª±c ti·∫øp doanh nghi·ªáp c√≥ nhu c·∫ßu thu√™ nh√† x∆∞·ªüng, ƒë·∫•t c√¥ng nghi·ªáp v·ªõi c√°c ch·ªß ƒë·∫ßu t∆∞ v√† ngu·ªìn cung ph√π h·ª£p. Ch√∫ng t√¥i h·ªó tr·ª£ t·ª´ kh√¢u t√¨m ki·∫øm, ƒë√°nh gi√°, ƒë√†m ph√°n h·ª£p ƒë·ªìng cho ƒë·∫øn khi ho√†n t·∫•t giao d·ªãch, ƒë·∫£m b·∫£o l·ª£i √≠ch t·ªëi ƒëa cho kh√°ch h√†ng."
            },
            "phap-ly": {
                title: "Chi ti·∫øt: T∆∞ v·∫•n Ph√°p L√Ω",
                content: "Cung c·∫•p th√¥ng tin chi ti·∫øt v√† t∆∞ v·∫•n chuy√™n s√¢u v·ªÅ c√°c quy ƒë·ªãnh ph√°p lu·∫≠t li√™n quan ƒë·∫øn ƒë·∫ßu t∆∞ v√†o KCN, th·ªß t·ª•c thu√™ ƒë·∫•t, gi·∫•y ph√©p x√¢y d·ª±ng, th√†nh l·∫≠p doanh nghi·ªáp, gi·∫•y ph√©p ho·∫°t ƒë·ªông v√† c√°c v·∫•n ƒë·ªÅ ph√°p l√Ω ph√°t sinh kh√°c trong qu√° tr√¨nh ho·∫°t ƒë·ªông t·∫°i KCN."
            },
            "dau-tu": {
                title: "Chi ti·∫øt: T∆∞ v·∫•n ƒê·∫ßu T∆∞",
                content: "ƒê·ªôi ng≈© chuy√™n gia c·ªßa ch√∫ng t√¥i th·ª±c hi·ªán ph√¢n t√≠ch th·ªã tr∆∞·ªùng b·∫•t ƒë·ªông s·∫£n c√¥ng nghi·ªáp, ƒë√°nh gi√° ti·ªÅm nƒÉng c·ªßa c√°c KCN, v√† cung c·∫•p c√°c b√°o c√°o, khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞ chi ti·∫øt, gi√∫p nh√† ƒë·∫ßu t∆∞ ƒë∆∞a ra quy·∫øt ƒë·ªãnh s√°ng su·ªët v√† hi·ªáu qu·∫£."
            },
            "thong-tin": {
                title: "Chi ti·∫øt: Cung c·∫•p Th√¥ng tin Th·ªã tr∆∞·ªùng",
                content: "Website li√™n t·ª•c c·∫≠p nh·∫≠t c√°c xu h∆∞·ªõng m·ªõi nh·∫•t c·ªßa th·ªã tr∆∞·ªùng BƒêS c√¥ng nghi·ªáp, c√°c ch√≠nh s√°ch ∆∞u ƒë√£i ƒë·∫ßu t∆∞, quy ho·∫°ch ph√°t tri·ªÉn KCN, c√πng c√°c b√°o c√°o ph√¢n t√≠ch chuy√™n s√¢u v√† nh·∫≠n ƒë·ªãnh t·ª´ c√°c chuy√™n gia h√†ng ƒë·∫ßu trong lƒ©nh v·ª±c."
            }
        };

        serviceCards.forEach(card => {
            card.addEventListener('click', () => {
                const serviceKey = card.dataset.service;
                if (serviceDetails[serviceKey]) {
                    serviceDetailTitle.textContent = serviceDetails[serviceKey].title;
                    serviceDetailContent.textContent = serviceDetails[serviceKey].content;
                    serviceDetailContainer.classList.remove('hidden');
                    serviceDetailContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                }
            });
        });
        
        const tabButtons = document.querySelectorAll('.tab-button');
        const tabContents = document.querySelectorAll('.tab-content');

        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const targetTab = button.dataset.tab;
                tabButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                tabContents.forEach(content => {
                    content.classList.add('hidden');
                    if (content.id === `tab-${targetTab}`) {
                        content.classList.remove('hidden');
                    }
                });
            });
        });
        
        const audienceCtx = document.getElementById('audienceChart')?.getContext('2d');
        if (audienceCtx) {
            new Chart(audienceCtx, {
                type: 'pie',
                data: {
                    labels: ['Doanh nghi·ªáp SX & Logistics', 'Ch·ªß ƒë·∫ßu t∆∞ KCN', 'Nh√† ƒë·∫ßu t∆∞ BƒêS CN', 'ƒê∆°n v·ªã t∆∞ v·∫•n', 'C∆° quan Nh√† n∆∞·ªõc'],
                    datasets: [{
                        label: 'Ph√¢n b·ªï ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u (V√≠ d·ª•)',
                        data: [40, 25, 20, 10, 5],
                        backgroundColor: ['#2C5282', '#4299E1', '#A8DADC', '#F56565', '#ECC94B'],
                        borderColor: '#FFFFFF',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { position: 'bottom', labels: { font: { size: 11 }, boxWidth: 15, padding: 10 }},
                        tooltip: { callbacks: { label: function(context) {
                            let label = context.label || '';
                            if (label) { label += ': '; }
                            if (context.parsed !== null) { label += context.parsed + '%'; }
                            const maxChars = 30;
                            if (label.length > maxChars) {
                                const words = label.split(' ');
                                let currentLine = '';
                                const lines = [];
                                words.forEach(word => {
                                    if ((currentLine + word).length > maxChars) { lines.push(currentLine.trim()); currentLine = ''; }
                                    currentLine += word + ' ';
                                });
                                lines.push(currentLine.trim());
                                return lines;
                            }
                            return label;
                        }}}
                    }
                }
            });
        }

        // Gemini API Integration
        const GEMINI_API_KEY = ""; // Canvas will provide this
        const GEMINI_API_URL_FLASH = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;

        async function callGeminiAPI(promptText, chatHistoryArray = null) {
            let contents;
            if (chatHistoryArray) {
                contents = [...chatHistoryArray, { role: "user", parts: [{ text: promptText }] }];
            } else {
                contents = [{ role: "user", parts: [{ text: promptText }] }];
            }

            const payload = { contents: contents };
            
            try {
                const response = await fetch(GEMINI_API_URL_FLASH, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    console.error("Gemini API Error:", errorData);
                    throw new Error(`API request failed with status ${response.status}: ${errorData?.error?.message || 'Unknown error'}`);
                }
                const result = await response.json();
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    return result.candidates[0].content.parts[0].text;
                } else {
                    console.error("Unexpected API response structure:", result);
                    throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c n·ªôi dung h·ª£p l·ªá t·ª´ AI.');
                }
            } catch (error) {
                console.error("Error calling Gemini API:", error);
                throw error; // Re-throw to be caught by caller
            }
        }

        // AI Chatbot Logic
        const chatInput = document.getElementById('chat-input');
        const chatSendBtn = document.getElementById('chat-send-btn');
        const chatHistoryEl = document.getElementById('chat-history');
        const chatLoader = document.getElementById('chat-loader');
        const chatErrorEl = document.getElementById('chat-error');
        let kcnChatHistory = [{role: "model", parts: [{text: "Ch√†o b·∫°n! T√¥i l√† AI t∆∞ v·∫•n ph√°p l√Ω KCN. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ c√°c v·∫•n ƒë·ªÅ ph√°p l√Ω c∆° b·∫£n li√™n quan ƒë·∫øn khu c√¥ng nghi·ªáp t·∫°i Vi·ªát Nam?"}]}];

        function appendMessageToChat(text, sender) {
            const bubble = document.createElement('div');
            bubble.classList.add('chat-bubble', sender === 'user' ? 'user-bubble' : 'ai-bubble');
            bubble.textContent = text;
            chatHistoryEl.appendChild(bubble);
            chatHistoryEl.scrollTop = chatHistoryEl.scrollHeight; // Scroll to bottom
        }
        // Display initial AI message for chatbot
        if (chatHistoryEl && kcnChatHistory.length > 0 && kcnChatHistory[0].role === 'model') {
           chatHistoryEl.innerHTML = ''; // Clear placeholder
           appendMessageToChat(kcnChatHistory[0].parts[0].text, 'ai');
        }


        if (chatSendBtn) {
            chatSendBtn.addEventListener('click', async () => {
                const userMessage = chatInput.value.trim();
                if (!userMessage) return;

                appendMessageToChat(userMessage, 'user');
                chatInput.value = '';
                chatLoader.classList.remove('hidden');
                chatSendBtn.disabled = true;
                chatErrorEl.classList.add('hidden');

                try {
                    const systemPrompt = "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n t∆∞ v·∫•n c√°c v·∫•n ƒë·ªÅ ph√°p l√Ω c∆° b·∫£n li√™n quan ƒë·∫øn khu c√¥ng nghi·ªáp t·∫°i Vi·ªát Nam. H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng v√† t·∫≠p trung v√†o c√¢u h·ªèi. N·∫øu kh√¥ng bi·∫øt, h√£y n√≥i l√† b·∫°n kh√¥ng c√≥ th√¥ng tin v·ªÅ v·∫•n ƒë·ªÅ ƒë√≥.";
                    const fullPrompt = `${systemPrompt} C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: ${userMessage}`;
                    
                    // Add user message to kcnChatHistory for context
                    kcnChatHistory.push({ role: "user", parts: [{ text: userMessage }] });

                    const aiResponse = await callGeminiAPI(userMessage, kcnChatHistory.slice(0, -1)); // Send history *before* current user message
                    
                    appendMessageToChat(aiResponse, 'ai');
                    // Add AI response to kcnChatHistory
                    kcnChatHistory.push({ role: "model", parts: [{ text: aiResponse }] });

                } catch (error) {
                    appendMessageToChat(`L·ªói: ${error.message}`, 'ai');
                    chatErrorEl.textContent = `Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi AI: ${error.message}`;
                    chatErrorEl.classList.remove('hidden');
                } finally {
                    chatLoader.classList.add('hidden');
                    chatSendBtn.disabled = false;
                }
            });
        }
         if (chatInput) {
            chatInput.addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    event.preventDefault(); 
                    chatSendBtn.click(); 
                }
            });
        }


        // Property Description Generator Logic
        const generateDescBtn = document.getElementById('generate-desc-btn');
        const propTypeInput = document.getElementById('prop-type');
        const propAreaInput = document.getElementById('prop-area');
        const propLocationInput = document.getElementById('prop-location');
        const propFeaturesInput = document.getElementById('prop-features');
        const generatedDescTextarea = document.getElementById('generated-prop-desc');
        const descLoader = document.getElementById('desc-loader');
        const descErrorEl = document.getElementById('desc-error');

        if (generateDescBtn) {
            generateDescBtn.addEventListener('click', async () => {
                const propType = propTypeInput.value.trim();
                const propArea = propAreaInput.value.trim();
                const propLocation = propLocationInput.value.trim();
                const propFeatures = propFeaturesInput.value.trim();

                if (!propType || !propArea || !propLocation) {
                    descErrorEl.textContent = 'Vui l√≤ng nh·∫≠p Lo·∫°i h√¨nh, Di·ªán t√≠ch v√† V·ªã tr√≠ BƒêS.';
                    descErrorEl.classList.remove('hidden');
                    return;
                }
                descErrorEl.classList.add('hidden');
                descLoader.classList.remove('hidden');
                generateDescBtn.disabled = true;
                generatedDescTextarea.value = 'ƒêang t·∫°o m√¥ t·∫£...';

                const prompt = `H√£y vi·∫øt m·ªôt m√¥ t·∫£ b·∫•t ƒë·ªông s·∫£n khu c√¥ng nghi·ªáp chuy√™n nghi·ªáp v√† h·∫•p d·∫´n b·∫±ng ti·∫øng Vi·ªát ƒë·ªÉ ƒëƒÉng tin cho thu√™, v·ªõi c√°c th√¥ng tin sau:
                - Lo·∫°i h√¨nh: ${propType}
                - Di·ªán t√≠ch: ${propArea} m¬≤
                - V·ªã tr√≠/ƒêi·ªÉm n·ªïi b·∫≠t KCN: ${propLocation}
                - ƒê·∫∑c ƒëi·ªÉm ch√≠nh kh√°c: ${propFeatures || 'Kh√¥ng c√≥ th√¥ng tin th√™m'}
                H√£y nh·∫•n m·∫°nh c√°c l·ª£i th·∫ø c·∫°nh tranh (n·∫øu c√≥ th·ªÉ suy lu·∫≠n), s·ª≠ d·ª•ng ng√¥n ng·ªØ thu h√∫t nh√† ƒë·∫ßu t∆∞ v√† doanh nghi·ªáp. ƒê·ªô d√†i kho·∫£ng 3-5 c√¢u.`;

                try {
                    const description = await callGeminiAPI(prompt);
                    generatedDescTextarea.value = description;
                } catch (error) {
                    generatedDescTextarea.value = 'L·ªói khi t·∫°o m√¥ t·∫£.';
                    descErrorEl.textContent = `L·ªói: ${error.message}`;
                    descErrorEl.classList.remove('hidden');
                } finally {
                    descLoader.classList.add('hidden');
                    generateDescBtn.disabled = false;
                }
            });
        }

    </script>
</body>
</html>

